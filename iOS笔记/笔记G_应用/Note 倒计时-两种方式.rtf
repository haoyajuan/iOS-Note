{\rtf1\ansi\ansicpg936\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset134 STHeitiSC-Light;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red28\green0\blue207;\red0\green116\blue0;\red170\green13\blue145;
\red92\green38\blue153;\red46\green13\blue110;\red100\green56\blue32;\red63\green110\blue116;\red196\green26\blue22;
\red38\green71\blue75;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21880\viewh19800\viewkind0
\deftab963
\pard\tx963\pardeftab963\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 \'b7\'bd\'b7\'a8
\f1 \cf2 1
\f0 \cf0 \'a3\'ba\'ca\'b9\'d3\'c3
\f1 NSTimer
\f0 \'c0\'b4\'ca\'b5\'cf\'d6
\f1 \

\f0 \'d6\'f7\'d2\'aa\'ca\'b9\'d3\'c3\'b5\'c4\'ca\'c7
\f1 NSTimer
\f0 \'b5\'c4
\f1 scheduledTimerWithTimeInterval
\f0 \'b7\'bd\'b7\'a8\'c0\'b4\'c3\'bf
\f1 \cf2 1
\f0 \cf0 \'c3\'eb\'d6\'b4\'d0\'d0\'d2\'bb\'b4\'ce
\f1 timeFireMethod
\f0 \'ba\'af\'ca\'fd\'a3\'ac
\f1 timeFireMethod
\f0 \'bd\'f8\'d0\'d0\'b5\'b9\'bc\'c6\'ca\'b1\'b5\'c4\'d2\'bb\'d0\'a9\'b2\'d9\'d7\'f7\'a3\'ac\'cd\'ea\'b3\'c9\'ca\'b1\'b0\'d1
\f1 timer
\f0 \'b8\'f8
\f1 invalidate
\f0 \'b5\'f4\'be\'cd
\f1 ok
\f0 \'c1\'cb\'a3\'ac\'b4\'fa\'c2\'eb\'c8\'e7\'cf\'c2\'a3\'ba
\f1 \
secondsCountDown = \cf2 60\cf0 ;\cf3 //60
\f0 \'c3\'eb\'b5\'b9\'bc\'c6\'ca\'b1
\f1 \cf0 \
\
\'a0countDownTimer = [NSTimer scheduledTimerWithTimeInterval:\cf2 1\cf0  target:\cf4 self\cf0  selector:\cf4 @selector\cf0 (timeFireMethod) userInfo:\cf4 nil\cf0  repeats:\cf4 YES\cf0 ];\
\
-(\cf4 void\cf0 )timeFireMethod\{\
    \
    \'a0\'a0\'a0\'a0secondsCountDown--;\
    \
    \'a0\'a0\'a0\'a0\cf4 if\cf0 (secondsCountDown==\cf2 0\cf0 )\{\
        \
        \'a0\'a0\'a0\'a0\'a0\'a0[countDownTimer invalidate];\
        \
        \'a0\'a0\'a0\'a0\}\
    \
\}\
\
\

\f0 \'b7\'bd\'b7\'a8
\f1 \cf2 2
\f0 \cf0 \'a3\'ba\'ca\'b9\'d3\'c3
\f1 GCD
\f0 \'c0\'b4\'ca\'b5\'cf\'d6
\f1 \
\
\cf4 __block\cf0  \cf4 int\cf0  timeout=\cf2 300\cf0 ; \cf3 //
\f0 \'b5\'b9\'bc\'c6\'ca\'b1\'ca\'b1\'bc\'e4
\f1 \cf0 \
\
\cf5 dispatch_queue_t\cf0  queue = \cf6 dispatch_get_global_queue\cf0 (\cf7 DISPATCH_QUEUE_PRIORITY_DEFAULT\cf0 , \cf2 0\cf0 );\
\
\cf5 dispatch_source_t\cf0  _timer = \cf6 dispatch_source_create\cf0 (\cf7 DISPATCH_SOURCE_TYPE_TIMER\cf0 , \cf2 0\cf0 , \cf2 0\cf0 ,\cf8 queue\cf0 );\
\
dispatch_source_set_timer(_timer,dispatch_walltime(\cf4 NULL\cf0 , \cf2 0\cf0 ),\cf2 1.0\cf0 *\cf7 NSEC_PER_SEC\cf0 , \cf2 0\cf0 ); \cf3 //
\f0 \'c3\'bf\'c3\'eb\'d6\'b4\'d0\'d0
\f1 \cf0 \
\
dispatch_source_set_event_handler(_timer, ^\{\
    \
    \'a0\'a0\'a0\'a0\cf4 if\cf0 (timeout<=\cf2 0\cf0 )\{ \cf3 //
\f0 \'b5\'b9\'bc\'c6\'ca\'b1\'bd\'e1\'ca\'f8\'a3\'ac\'b9\'d8\'b1\'d5
\f1 \cf0 \
        \
        \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dispatch_source_cancel(_timer);\
        \
        \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 dispatch_release\cf0 (_timer);\
        \
        \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dispatch_async(dispatch_get_main_queue(), ^\{\
            \
            \'a0\'a0\'a0\'a0\cf3 //
\f0 \'c9\'e8\'d6\'c3\'bd\'e7\'c3\'e6\'b5\'c4\'b0\'b4\'c5\'a5\'cf\'d4\'ca\'be
\f1  
\f0 \'b8\'f9\'be\'dd\'d7\'d4\'bc\'ba\'d0\'e8\'c7\'f3\'c9\'e8\'d6\'c3
\f1 \cf0 \
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0 \'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3
\f1 \
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\});\
        \
        \'a0\'a0\'a0\'a0\}\cf4 else\cf0 \{\
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf4 int\cf0  minutes = timeout / \cf2 60\cf0 ;\
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf4 int\cf0  seconds = timeout % \cf2 60\cf0 ;\
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0NSString *strTime = [NSString stringWithFormat:\cf9 @"%d
\f0 \'b7\'d6
\f1 %.2
\f0 \'c3\'eb\'ba\'f3\'d6\'d8\'d0\'c2\'bb\'f1\'c8\'a1\'d1\'e9\'d6\'a4\'c2\'eb
\f1 "\cf0 ,minutes, seconds];\
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dispatch_async(dispatch_get_main_queue(), ^\{\
                \
                \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf3 //
\f0 \'c9\'e8\'d6\'c3\'bd\'e7\'c3\'e6\'b5\'c4\'b0\'b4\'c5\'a5\'cf\'d4\'ca\'be
\f1  
\f0 \'b8\'f9\'be\'dd\'d7\'d4\'bc\'ba\'d0\'e8\'c7\'f3\'c9\'e8\'d6\'c3
\f1 \cf0 \
                \
                \'a0\'a0\'a0\'a0
\f0 \'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3
\f1 \
                \
                \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\});\
            \
            \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0timeout--;\
            \
            \'a0\
            \
            \'a0\'a0\'a0\'a0\}\
    \
\});\
dispatch_resume(_timer);\
\
\
\
\
- (\cf4 void\cf0 )countDownTimer\{    \
    \cf5 dispatch_queue_t\cf0  queue = \cf6 dispatch_get_global_queue\cf0 (\cf7 DISPATCH_QUEUE_PRIORITY_DEFAULT\cf0 , \cf2 0\cf0 );\
    \cf5 dispatch_source_t\cf0  _timer = \cf6 dispatch_source_create\cf0 (\cf7 DISPATCH_SOURCE_TYPE_TIMER\cf0 , \cf2 0\cf0 , \cf2 0\cf0 ,queue);\
    \cf6 dispatch_source_set_timer\cf0 (_timer,\cf6 dispatch_walltime\cf0 (\cf4 NULL\cf0 , \cf2 0\cf0 ),\cf2 1.0\cf0 *\cf7 NSEC_PER_SEC\cf0 , \cf2 0\cf0 ); \cf3 //
\f0 \'c3\'bf\'c3\'eb\'d6\'b4\'d0\'d0
\f1 \cf0 \
    \cf6 dispatch_source_set_event_handler\cf0 (_timer, ^\{\
        \cf3 /**
\f0 \'c1\'bd\'b8\'f6\'d1\'ad\'bb\'b7
\f1  
\f0 \'d2\'bb\'b8\'f6\'d3\'c3\'c0\'b4\'bc\'c6\'ca\'b1
\f1 ,
\f0 \'d2\'bb\'b8\'f6\'d3\'c3\'c0\'b4\'cb\'a2\'d0\'c2\'d2\'b3\'c3\'e6
\f1 */\cf0 \
        \cf4 for\cf0  (\cf8 YLGrabSeatTableViewCellFrames\cf0  *frame \cf4 in\cf0  \cf4 self\cf0 .\cf8 framesArray\cf0 ) \{\
            \cf8 GrabSeatInfoModel\cf0  *model = frame.\cf8 grabSeatInfoModel\cf0 ;\
            model.\cf8 timeCount\cf0 --;\
        \}\
        \cf5 NSArray\cf0  *array = [\cf4 self\cf0 .\cf8 CellsArray\cf0  \cf6 copy\cf0 ];\
        \cf4 __block\cf0  \cf5 NSInteger\cf0  count = \cf4 self\cf0 .\cf8 CellsArray\cf0 .\cf5 count\cf0 ;\
        \cf4 if\cf0  (count>\cf2 0\cf0 ) \{\
            \cf4 for\cf0  (\cf4 int\cf0  index=\cf2 0\cf0 ; index<array.\cf5 count\cf0 ; index++) \{\
                \cf8 YLGrabSeatTableViewCell\cf0  *cell = array[index];\
                \cf8 YLGrabSeatTableViewCellFrames\cf0  *frame = cell.\cf8 seatFrame\cf0 ;\
                \cf8 GrabSeatInfoModel\cf0  *model = frame.\cf8 grabSeatInfoModel\cf0 ;\
                \cf4 if\cf0 (model.\cf8 timeCount\cf0 <=\cf2 0\cf0 )\{ \cf3 //
\f0 \'b5\'b9\'bc\'c6\'ca\'b1\'bd\'e1\'ca\'f8\'a3\'ac\'b9\'d8\'b1\'d5
\f1 \cf0 \
                    \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), ^\{\
                        \cf3 //
\f0 \'c9\'e8\'d6\'c3\'bd\'e7\'c3\'e6\'b5\'c4\'b0\'b4\'c5\'a5\'cf\'d4\'ca\'be
\f1  
\f0 \'d0\'e8\'d2\'aa\'d6\'d8\'d0\'c2\'b7\'a2\'cb\'cd\'cd\'f8\'c2\'e7\'c7\'eb\'c7\'f3
\f1  
\f0 \'cb\'a2\'d0\'c2\'d2\'b3\'c3\'e6
\f1 \cf0 \
                        \cf8 YLGrabSeatTableViewCell\cf0  *cell = \cf4 self\cf0 .\cf8 CellsArray\cf0 [index];\
                        cell.\cf8 seatButton\cf0 .\cf5 backgroundColor\cf0  = \cf7 UIColorFromRGB\cf0 (\cf7 BrightRed_color\cf0 );\
                    \});\
                    \cf3 //[self.CellsArray removeObject:cell];\cf0 \
                    count--;\
                    \cf4 if\cf0  (count==\cf2 0\cf0 ) \{\
                        \cf6 dispatch_source_cancel\cf0 (_timer);\
                    \}\
                \}\cf4 else\cf0 \{\
                    \cf5 NSInteger\cf0  minutes = model.\cf8 timeCount\cf0  / \cf2 60\cf0 ;\
                    \cf5 NSInteger\cf0  seconds = model.\cf8 timeCount\cf0  % \cf2 60\cf0 ;\
                    \cf5 NSString\cf0  *strTime = [\cf5 NSString\cf0  \cf6 stringWithFormat\cf0 :\cf9 @"
\f0 \'b5\'b9\'bc\'c6\'ca\'b1\'ca\'b1\'bc\'e4
\f1 :%ld
\f0 \'b7\'d6
\f1 %.2ld
\f0 \'c3\'eb
\f1 "\cf0 ,(\cf4 long\cf0 )minutes, (\cf4 long\cf0 )seconds];\
                    \cf6 dispatch_async\cf0 (\cf6 dispatch_get_main_queue\cf0 (), ^\{\
                        \cf3 //
\f0 \'c9\'e8\'d6\'c3\'bd\'e7\'c3\'e6\'b5\'c4\'b0\'b4\'c5\'a5\'cf\'d4\'ca\'be
\f1  
\f0 \'cb\'a2\'d0\'c2\'b0\'b4\'c5\'a5\'c9\'cf\'b5\'c4\'cf\'d4\'ca\'be\'ca\'b1\'bc\'e4
\f1 \cf0 \
                        \cf3 //view.timerLabel.text = strTime;\cf0 \
                        \cf8 YLGrabSeatTableViewCell\cf0  *cell = \cf4 self\cf0 .\cf8 CellsArray\cf0 [index];\
                        [cell.\cf8 seatButton\cf0  \cf6 setTitle\cf0 :strTime \cf6 forState\cf0 :\cf6 UIControlStateNormal\cf0 ];\
                    \});\
                    \cf3 //model.timeCount--;\cf0 \
                \}\
            \}\
        \}\
    \});\
    \cf6 dispatch_resume\cf0 (_timer);\
\}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf7 #import \cf9 <UIKit/UIKit.h>\cf7 \
\cf3 //#import "CYInvesCommon.h"\cf0 \
\
\cf4 typedef\cf0  \cf4 void\cf0 (^timerClockEnd)();\
\
\cf4 @interface\cf0  CYTimerLabel : \cf5 UILabel\cf0 \
\
\cf4 @property\cf0  (\cf4 nonatomic\cf0 , \cf4 copy\cf0 )\cf8 timerClockEnd\cf0  clockEndBlock;\
\
+ (\cf4 instancetype\cf0 )timerLabelWithFrame:(\cf5 CGRect\cf0 )frame andTimeStamp:(\cf5 NSString\cf0 *)timeStamp andProductStatus:(CYProductCurrentStatus)proCurrentStatus;\
\
\cf4 @end\cf0 \
\
\cf7 #import \cf9 "CYTimerLabel.h"\cf7 \
\cf0 \
\cf4 @interface\cf0  \cf8 CYTimerLabel\cf0 ()\
\
\cf4 @property\cf0  (\cf4 nonatomic\cf0 , \cf4 assign\cf0 )\cf5 NSInteger\cf0  timeStampInterval;\
\cf4 @property\cf0  (\cf4 nonatomic\cf0 , \cf4 strong\cf0 )\cf5 NSTimer\cf0 * timerClock;\
\cf4 @property\cf0  (\cf4 nonatomic\cf0 , \cf4 copy\cf0 )\cf5 NSString\cf0 * statusString;\
\cf4 @property\cf0  (\cf4 nonatomic\cf0 , \cf4 assign\cf0 )CYProductCurrentStatus curProStatus;\
\
\cf4 @end\cf0 \
\
\cf4 @implementation\cf0  CYTimerLabel\
\
+ (\cf4 instancetype\cf0 )timerLabelWithFrame:(\cf5 CGRect\cf0 )frame andTimeStamp:(\cf5 NSString\cf0 *)timeStamp andProductStatus:(CYProductCurrentStatus)proCurrentStatus\
\{\
    \cf8 CYTimerLabel\cf0 * timeLabel = [\cf4 self\cf0  \cf6 alloc\cf0 ];\
    \
    timeLabel = [timeLabel \cf10 initWithFrame\cf0 :frame \cf10 andProductStatus\cf0 :proCurrentStatus];\
    \
    timeLabel.\cf8 timeStampInterval\cf0  = [timeStamp \cf6 longLongValue\cf0 ];\
    timeLabel.\cf8 curProStatus\cf0  = proCurrentStatus;\
    \
    \cf4 if\cf0  (CYProductCurrentStatusAnnounce == proCurrentStatus) \{\
        timeLabel.statusString = \cf9 @"
\f0 \'be\'e0\'c8\'cf\'b9\'ba\'bb\'b9\'d3\'d0
\f1 :"\cf0 ;\
    \}\
    \cf4 else\cf0  \cf4 if\cf0  (CYProductCurrentStatusWaiting == proCurrentStatus)\
    \{\
        timeLabel.statusString = \cf9 @"
\f0 \'be\'e0\'bb\'d8\'bf\'ee\'c7\'e5\'cb\'e3\'bb\'b9\'d3\'d0
\f1 :"\cf0 ;\
    \}\
    \
    \cf4 return\cf0  timeLabel;\
\}\
\
- (\cf4 instancetype\cf0 )initWithFrame:(\cf5 CGRect\cf0 )frame andProductStatus:(CYProductCurrentStatus)proCurrentStatus\
\{\
    \cf4 if\cf0  (\cf4 self\cf0  = [\cf4 super\cf0  \cf6 initWithFrame\cf0 :frame]) \{\
        \cf4 self\cf0 .\cf8 timerClock\cf0  = [\cf5 NSTimer\cf0  \cf6 scheduledTimerWithTimeInterval\cf0 :\cf2 1\cf0  \cf6 target\cf0 :\cf4 self\cf0  \cf6 selector\cf0 :\cf4 @selector\cf0 (refreshLabelTime:) \cf6 userInfo\cf0 :\cf4 nil\cf0  \cf6 repeats\cf0 :\cf4 YES\cf0 ];\
    \}\
    \
    \cf4 return\cf0  \cf4 self\cf0 ;\
\}\
- (\cf4 void\cf0 )refreshLabelTime:(CYProductCurrentStatus)proCurrentStatus\
\{\
    \cf4 if\cf0  (\cf2 0\cf0  == \cf4 self\cf0 .\cf8 timeStampInterval\cf0 ) \{\
        \
        \cf4 if\cf0  (CYProductCurrentStatusAnnounce == proCurrentStatus) \{\
            \cf4 self\cf0 .text = \cf9 @"
\f0 \'be\'e0\'c8\'cf\'b9\'ba\'bb\'b9\'d3\'d0
\f1 :"\cf0 ;\
        \}\
        \cf4 else\cf0  \cf4 if\cf0  (CYProductCurrentStatusWaiting == proCurrentStatus)\
        \{\
            \cf4 self\cf0 .text = \cf9 @"
\f0 \'be\'e0\'bb\'d8\'bf\'ee\'c7\'e5\'cb\'e3\'bb\'b9\'d3\'d0
\f1 :"\cf0 ;\
        \}\
        [\cf4 self\cf0 .\cf8 timerClock\cf0  \cf6 invalidate\cf0 ];\
        \
        \cf4 if\cf0  (CYProductCurrentStatusAnnounce == \cf4 self\cf0 .curProStatus) \{\
            \cf4 if\cf0  (\cf4 self\cf0 .clockEndBlock) \{\
                \cf4 self\cf0 .clockEndBlock();\
            \}\
            \cf4 self\cf0 .text = \cf9 @"
\f0 \'c1\'a2\'bc\'b4\'c8\'cf\'b9\'ba
\f1 "\cf0 ;\
        \}\
        \cf4 else\cf0  \cf4 if\cf0  (CYProductCurrentStatusWaiting == \cf4 self\cf0 .curProStatus)\
        \{\
            \cf4 self\cf0 .text = \cf9 @"
\f0 \'bb\'d8\'bf\'ee\'c7\'e5\'cb\'e3\'d6\'d0
\f1 "\cf0 ;\
        \}\
        \
        \cf4 return\cf0 ;\
    \}\
    \
    \cf5 NSInteger\cf0  oneDay = \cf2 24\cf0 *\cf2 60\cf0 *\cf2 60\cf0 ;\
    \cf5 NSInteger\cf0  oneHour = \cf2 60\cf0 *\cf2 60\cf0 ;\
    \
    \cf5 NSInteger\cf0  daysNum;\
    \cf4 if\cf0  (CYProductCurrentStatusAnnounce == \cf4 self\cf0 .curProStatus) \{\
        daysNum = \cf4 self\cf0 .timeStampInterval/oneDay;\
    \}\
    \cf4 else\cf0  \cf4 if\cf0  (CYProductCurrentStatusWaiting == \cf4 self\cf0 .curProStatus)\
    \{\
        daysNum = \cf4 self\cf0 .timeStampInterval/oneDay+\cf2 1\cf0 ;\
    \}\
    \
    \cf5 NSInteger\cf0  hoursNum = (\cf4 self\cf0 .\cf8 timeStampInterval\cf0 %oneDay)/oneHour;\
    \cf5 NSInteger\cf0  minutsNum = (\cf4 self\cf0 .\cf8 timeStampInterval\cf0 %oneHour)/\cf2 60\cf0 ;\
    \cf5 NSInteger\cf0  secondsNum = \cf4 self\cf0 .\cf8 timeStampInterval\cf0 %\cf2 60\cf0 ;\
    \
    \cf5 NSString\cf0  *daysTime = [\cf5 NSString\cf0  \cf6 stringWithFormat\cf0 :\cf9 @"%lu"\cf0 , daysNum];\
    \cf5 NSString\cf0  *hoursTime = [\cf5 NSString\cf0  \cf6 stringWithFormat\cf0 :\cf9 @"%lu"\cf0 , hoursNum];\
    \cf5 NSString\cf0  *minutsTime = [\cf5 NSString\cf0  \cf6 stringWithFormat\cf0 :\cf9 @"%lu"\cf0 , minutsNum];\
    \cf5 NSString\cf0  *secondsTime = [\cf5 NSString\cf0  \cf6 stringWithFormat\cf0 :\cf9 @"%lu"\cf0 , secondsNum];\
    \
    \cf4 self\cf0 .\cf5 text\cf0  = [\cf5 NSString\cf0  \cf6 stringWithFormat\cf0 :\cf9 @"%@%@
\f0 \'cc\'ec
\f1  %@
\f0 \'ca\'b1
\f1  %@
\f0 \'b7\'d6
\f1  %@
\f0 \'c3\'eb
\f1 "\cf0 ,\cf4 self\cf0 .\cf8 statusString\cf0 , daysTime, hoursTime, minutsTime, secondsTime];\
    \
    \cf4 self\cf0 .\cf8 timeStampInterval\cf0 --;\
\}}